#!/usr/bin/env node
//
//   Copyright 2015 Ilkka Oksanen <iao@iki.fi>
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing,
//   software distributed under the License is distributed on an "AS
//   IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
//   express or implied.  See the License for the specific language
//   governing permissions and limitations under the License.
//

'use strict';

const ObjectStore = require('rigiddb');

const store = new ObjectStore('mas', { db: 10 });

store.setSchema(1, {
    users: {
        definition: {
            deleted: { type: 'boolean', allowNull: false },
            deletionTime: 'timestamp',
            email: 'string',
            deletedEmail: 'string',
            emailConfirmed: { type: 'boolean', allowNull: false },
            emailMD5: 'string',
            extAuthId: 'string',
            inUse: { type: 'boolean', allowNull: false },
            lastIp: 'string',
            lastLogout: 'timestamp',
            name: 'string',
            nick: 'string',
            password: 'string',
            passwordType: 'string',
            registrationTime: { type: 'timestamp', allowNull: false },
            secret: 'string',
            secretExpires: 'timestamp'
        },
        indices: {
            email: {
                uniq: true,
                fields: [
                    { name: 'email', caseInsensitive: true }
                ]
            },
            nick: {
                uniq: true,
                fields: [
                    { name: 'nick', caseInsensitive: true }
                ]
            },
            extAuth: {
                uniq: true,
                fields: [ 'extAuthId' ]
            }
        }
    },
    windows: {
        definition: {
            userId: { type: 'int', allowNull: false },
            conversationId: { type: 'int', allowNull: false },
            emailAlert: 'boolean',
            notificationAlert: 'boolean',
            soundAlert: 'boolean',
            titleAlert: 'boolean',
            minimizedNamesList: 'boolean',
            desktop: 'int',
            row: 'int',
            column: 'int'
        },
        indices: {
            userId: {
                uniq: false,
                fields: [ 'userId' ]
            },
            conversationId: {
                uniq: false,
                fields: [ 'conversationId' ]
            },
            userIdConversationId: {
                uniq: true,
                fields: [ 'userId', 'conversationId' ]
            }
        }
    },
    settings: {
        definition: {
            userId: { type: 'int', allowNull: false },
            activeDesktop: 'int',
            theme: 'string',
        },
        indices: {
            userId: {
                uniq: true,
                fields: [ 'userId' ]
            }
        }
    },
    friends: {
        definition: {
            srcUserId: { type: 'int', allowNull: false },
            dstUserId: { type: 'int', allowNull: false },
            state: { type: 'string', allowNull: false } // asking, pending, blocked, active
        },
        indices: {
            srcUserId: {
                uniq: false,
                fields: [ 'srcUserId' ]
            },
            dstUserId: {
                uniq: false,
                fields: [ 'dstUserId' ]
            },
            friends: {
                uniq: true,
                fields: [ 'srcUserId', 'dstUserId']
            }
        }
    },
    conversations: {
        definition: {
            type: { type: 'string', allowNull: false },
            network: { type: 'string', allowNull: false },
            name: 'string',
            owner: 'int',
            topic: 'string',
            password: 'string'
        },
        indices: {
            networkName: {
                uniq: true,
                fields: [
                    'type',
                    'network',
                    { name: 'name', caseInsensitive: true }
                ]
            }
        }
    },
    conversationMembers: {
        definition: {
            conversationId: { type: 'int', allowNull: false },
            userGId: { type: 'string', allowNull: false },
            role: { type: 'string', allowNull: false },
        },
        indices: {
            userGId: {
                uniq: false,
                fields: [ 'userGId' ]
            },
            conversationId: {
                uniq: false,
                fields: [ 'conversationId' ]
            }
        }
    }
}).then(function(result) {
    console.log(result.val ? 'RigidDB schema initialized successfully.' : 'ERROR: Schema creation failed.');
    store.quit();
})
