#!/usr/bin/env node
//
//   Copyright 2015 Ilkka Oksanen <iao@iki.fi>
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing,
//   software distributed under the License is distributed on an "AS
//   IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
//   express or implied.  See the License for the specific language
//   governing permissions and limitations under the License.
//

'use strict';

const readline = require('readline');
const log = require('../lib/log');
const redis = require('../lib/redis');
const User = require('../models/user');
const Ipm = require('../models/ipm');
const PendingIpm = require('../models/pendingIpm');
const notification = require('../lib/notification');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

(async function main() {
    const body = await question('Message: ');
    const expiresInHours = await question('Expires in (hours): ');

    const expiresAt = now();
    expiresAt.setHours(expiresAt.getHours() + expiresInHours);

    const ipm = await Ipm.create({ body, expiresAt });

    await deliverIpm(ipm);
    await deleteExpiredIpms();

    redis.shutdown();
    log.quit();

    console.log('Done. All OK.'); // eslint-disable-line no-console

    rl.close();
}());

async function deleteExpiredIpms() {
    const allIpms = await Ipm.fetchAll();

    for (const ipm of allIpms) {
        if (ipm.get('expiresAt') < now()) {
            const pendingIpms = await PendingIpm.find({ ipmId: ipm.id });

            for (const pendingIpm of pendingIpms) {
                await pendingIpm.delete();
            }

            await ipm.delete();
        }
    }
}

async function deliverIpm(ipm) {
    console.log('Delivering the alert to all users...'); // eslint-disable-line no-console

    const allUsers = await User.fetchAll();

    const alertNtf = {
        id: 'ADD_ALERT',
        alertId: ipm.id,
        message: ipm.get('body')
    };

    for (const user of allUsers) {
        await PendingIpm.create({ userId: user.id, ipmId: ipm.id })
        await notification.broadcast(user, alertNtf);
    }
}

async function question(label) {
    return new Promise(resolve => rl.question(label, answer => resolve(answer)));
}

async function yesOrNo(label) {
    let result = null;

    while (result === null) {
        const response = await question(`${label} [yes/no]: `);

        if (response === 'yes') {
            result = true;
        } else if (response === 'no') {
            result = false;
        }
    }

    return result;
}

function now() {
    return new Date();
}
