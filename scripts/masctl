#!/usr/bin/env bash

shopt -s nullglob

ROOT=$( cd $( dirname "${BASH_SOURCE[0]}" ) && cd .. && pwd )
ACTION='none'
ALSO_CONNMAN=false
IMPORT=false
NODE=$(which node)

GREEN_COLOR='\e[0;32m'
RED_COLOR='\e[0;31m'
NO_COLOR='\e[0m'

source $ROOT/scripts/read_ini.sh

read_ini $ROOT/mas.conf --booleans 0

PID_DIRECTORY=${INI__pid__directory%/}
LOG_DIRECTORY=${INI__log__directory%/}
IDENTD_ENABLED=${INI__irc__identd}

#Expand paths if they are relative
if [[ "$PID_DIRECTORY" != /* ]]; then
    PID_DIRECTORY=$ROOT/$PID_DIRECTORY
fi

if [[ "$LOG_DIRECTORY" != /* ]]; then
    LOG_DIRECTORY=$ROOT/$LOG_DIRECTORY
fi

usage ()
{
    echo "Usage: control [options] <start|stop|restart|status>"
    echo ""
    echo "control is a tool to manage MAS processes."
    echo ""
    echo "-c|--connman         Also start, stop or restart IRC connman process."
    echo "-i|--import          MeetAndSpeak.com specific option."
    exit
}

while [[ $# > 0 ]]; do
    KEY="$1"
    shift

    case $KEY in
    -i|--import)
        IMPORT=true
        ;;
    -c|--connman)
        ALSO_CONNMAN=true
        ;;
    start)
        ACTION='start'
        ;;
    stop)
        ACTION='stop'
        ;;
    restart)
        ACTION='restart'
        ;;
    status)
        ACTION='status'
        ;;
    *)
        usage
        ;;
    esac
done

if [ $ACTION == "none" ]; then
    usage
fi

if [ $ACTION == "stop" ] || [ $ACTION == "restart" ]; then
    # Kill all running mas processes
    for file in $PID_DIRECTORY/*.pid; do
        PID=$(<$file)
        OWNER=$(ps aux | awk -v PID=$PID '$2 == PID { print $1 }')
        NAME=$(basename $file .pid)
        SUDO=''

        if $ALSO_CONNMAN || [ $NAME != "mas-irc-connman" ]; then
            if [ -n "$OWNER" ] && [ $OWNER == "root" ]; then
                SUDO='sudo'
            fi

            $SUDO kill $PID 2>/dev/null

            if [ $? -eq 0 ]; then
                printf "${RED_COLOR}Stopped:${NO_COLOR} $NAME [owner: $OWNER]\n"
            else
                echo "Process $NAME (pid: $PID) was not running even the PID file existed."
            fi

            $SUDO rm -f $file # In case the process was already dead
        fi
    done
fi

CURRENT_USER=$(whoami)

if [ $ACTION == "start" ] || [ $ACTION == "restart" ]; then
    # Create logs and pid directories if they don't exist
    mkdir -p $LOG_DIRECTORY
    mkdir -p $PID_DIRECTORY

    # Make sure Redis is running
    echo 'Making sure Redis is running...'
    redis-server ./conf/redis.conf

    # Init Redisn (only for meetandspeak.com)
    if $IMPORT; then
        echo 'Making sure MySQL is running...'
        mysql.server start
        echo 'Resetting Redis data from MySQL...'
        (cd $ROOT/migration && $NODE --harmony initRedis)
    fi

    if $ALSO_CONNMAN; then
        # Start connection manager
        if $IDENTD_ENABLED; then
            printf "${GREEN_COLOR}Starting:${NO_COLOR} mas-irc-connman [user: root]\n"
            sudo sh -c "$NODE --harmony $ROOT/server/backends/irc/connectionManager.js > /dev/null & disown %1"
        else
            printf "${GREEN_COLOR}Starting:${NO_COLOR} mas-irc-connman [user: $CURRENT_USER]\n"
            (nohup $NODE --harmony $ROOT/server/backends/irc/connectionManager.js > /dev/null &)
        fi
    fi

    # Start irc backend
    printf "${GREEN_COLOR}Starting:${NO_COLOR} mas-irc [user: $CURRENT_USER]\n"
    (nohup $NODE --harmony $ROOT/server/backends/irc/controller.js > /dev/null &)

    # Start loopback backend
    printf "${GREEN_COLOR}Starting:${NO_COLOR} mas-loopback [user: $CURRENT_USER]\n"
    (nohup $NODE --harmony $ROOT/server/backends/loopback/controller.js > /dev/null &)

    # Start frontend server
    printf "${GREEN_COLOR}Starting:${NO_COLOR} mas-frontend [user: $CURRENT_USER]\n"
    (nohup $NODE --harmony $ROOT/server/server.js > /dev/null &)
fi

if [ $ACTION == "status" ]; then
    declare -a SERVERS=(mas-frontend mas-loopback mas-irc mas-irc-connman)

    for i in "${SERVERS[@]}"; do
        PID=''

        if [ -e $PID_DIRECTORY/$i.pid ]; then
            PID=$(<$PID_DIRECTORY/$i.pid)
        fi

        if ! ps -p $PID > /dev/null 2>&1; then
            printf "$i: ${RED_COLOR}stopped${NO_COLOR}\n"
        else
            printf "$i: ${GREEN_COLOR}running${NO_COLOR}, pid: $PID\n"
        fi
    done
fi
